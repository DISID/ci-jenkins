// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.disid.restful.repository;

import com.disid.restful.model.Category;
import com.disid.restful.model.QCategory;
import com.disid.restful.repository.CategoryRepositoryCustom;
import com.disid.restful.repository.CategoryRepositoryImpl;
import com.querydsl.core.types.Path;
import com.querydsl.jpa.JPQLQuery;
import io.springlets.data.domain.GlobalSearch;
import io.springlets.data.jpa.repository.support.QueryDslRepositorySupportExt.AttributeMappingBuilder;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.transaction.annotation.Transactional;

privileged aspect CategoryRepositoryImpl_Roo_Jpa_Repository_Impl {
    
    declare parents: CategoryRepositoryImpl implements CategoryRepositoryCustom;
    
    declare @type: CategoryRepositoryImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String CategoryRepositoryImpl.NAME = "name";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String CategoryRepositoryImpl.DESCRIPTION = "description";
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Category> CategoryRepositoryImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        
        QCategory category = QCategory.category;
        
        JPQLQuery<Category> query = from(category);
        
        Path<?>[] paths = new Path<?>[] {category.name,category.description};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(NAME, category.name)
			.map(DESCRIPTION, category.description);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, category);
    }
    
}
