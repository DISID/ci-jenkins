// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.disid.restful.web;

import com.disid.restful.model.Category;
import com.disid.restful.model.Product;
import com.disid.restful.service.api.CategoryService;
import com.disid.restful.service.api.ProductService;
import com.disid.restful.web.CategoriesCollectionThymeleafController;
import com.disid.restful.web.CategoriesCollectionThymeleafLinkFactory;
import com.disid.restful.web.CategoriesItemProductsThymeleafController;
import io.springlets.data.domain.GlobalSearch;
import io.springlets.data.web.datatables.ConvertedDatatablesData;
import io.springlets.data.web.datatables.Datatables;
import io.springlets.data.web.datatables.DatatablesColumns;
import io.springlets.data.web.datatables.DatatablesPageable;
import io.springlets.web.NotFoundException;
import io.springlets.web.mvc.util.ControllerMethodLinkBuilderFactory;
import io.springlets.web.mvc.util.MethodLinkBuilderFactory;
import java.util.Collection;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.MessageSource;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.core.convert.ConversionService;
import org.springframework.data.domain.Page;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

privileged aspect CategoriesItemProductsThymeleafController_Roo_Thymeleaf {
    
    declare @type: CategoriesItemProductsThymeleafController: @Controller;
    
    declare @type: CategoriesItemProductsThymeleafController: @RequestMapping(value = "/categories/{category}/products", name = "CategoriesItemProductsThymeleafController", produces = MediaType.TEXT_HTML_VALUE);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private MessageSource CategoriesItemProductsThymeleafController.messageSource;
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private MethodLinkBuilderFactory<CategoriesCollectionThymeleafController> CategoriesItemProductsThymeleafController.collectionLink;
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private ConversionService CategoriesItemProductsThymeleafController.conversionService;
    
    /**
     * TODO Auto-generated constructor documentation
     * 
     * @param categoryService
     * @param productService
     * @param conversionService
     * @param messageSource
     * @param linkBuilder
     */
    @Autowired
    public CategoriesItemProductsThymeleafController.new(CategoryService categoryService, ProductService productService, ConversionService conversionService, MessageSource messageSource, ControllerMethodLinkBuilderFactory linkBuilder) {
        setCategoryService(categoryService);
        setProductService(productService);
        setConversionService(conversionService);
        setMessageSource(messageSource);
        setCollectionLink(linkBuilder.of(CategoriesCollectionThymeleafController.class));
    }

    /**
     * TODO Auto-generated method documentation
     * 
     * @return MessageSource
     */
    public MessageSource CategoriesItemProductsThymeleafController.getMessageSource() {
        return messageSource;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param messageSource
     */
    public void CategoriesItemProductsThymeleafController.setMessageSource(MessageSource messageSource) {
        this.messageSource = messageSource;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return MethodLinkBuilderFactory
     */
    public MethodLinkBuilderFactory<CategoriesCollectionThymeleafController> CategoriesItemProductsThymeleafController.getCollectionLink() {
        return collectionLink;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param collectionLink
     */
    public void CategoriesItemProductsThymeleafController.setCollectionLink(MethodLinkBuilderFactory<CategoriesCollectionThymeleafController> collectionLink) {
        this.collectionLink = collectionLink;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return ConversionService
     */
    public ConversionService CategoriesItemProductsThymeleafController.getConversionService() {
        return conversionService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param conversionService
     */
    public void CategoriesItemProductsThymeleafController.setConversionService(ConversionService conversionService) {
        this.conversionService = conversionService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param id
     * @param locale
     * @param method
     * @return Category
     */
    @ModelAttribute
    public Category CategoriesItemProductsThymeleafController.getCategory(@PathVariable("category") Long id, Locale locale, HttpMethod method) {
        Category category = null;
        if (HttpMethod.PUT.equals(method)) {
            category = categoryService.findOneForUpdate(id);
        } else {
            category = categoryService.findOne(id);
        }
        
        if (category == null) {
            String message = messageSource.getMessage("error_NotFound", new Object[] {"Category", id}, "The record couldn't be found", locale);
            throw new NotFoundException(message);
        }
        return category;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param model
     */
    public void CategoriesItemProductsThymeleafController.populateFormats(Model model) {
        model.addAttribute("application_locale", LocaleContextHolder.getLocale().getLanguage());
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param model
     */
    public void CategoriesItemProductsThymeleafController.populateForm(Model model) {
        populateFormats(model);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param categories
     * @param datatablesColumns
     * @param search
     * @param pageable
     * @param draw
     * @return ResponseEntity
     */
    @GetMapping(name = "datatables", produces = Datatables.MEDIA_TYPE, value = "/dt")
    @ResponseBody
    public ResponseEntity<ConvertedDatatablesData<Product>> CategoriesItemProductsThymeleafController.datatables(@ModelAttribute Category categories, DatatablesColumns datatablesColumns, GlobalSearch search, DatatablesPageable pageable, @RequestParam("draw") Integer draw) {
        
        Page<Product> products = getProductService().findByCategoriesContains(categories, search, pageable);
        long totalProductsCount = getProductService().countByCategoriesContains(categories);
        ConvertedDatatablesData<Product> data =  new ConvertedDatatablesData<Product>(products, totalProductsCount, draw, getConversionService(), datatablesColumns);
        return ResponseEntity.ok(data);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param category
     * @param model
     * @return ModelAndView
     */
    @GetMapping(value = "/create-form", name = "createForm")
    public ModelAndView CategoriesItemProductsThymeleafController.createForm(@ModelAttribute Category category, Model model) {
        populateForm(model);
        model.addAttribute(new Product());
        return new ModelAndView("categories/products/create");
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param category
     * @param productsToRemove
     * @return ResponseEntity
     */
    @DeleteMapping(name = "removeFromProducts", value = "/{productsToRemove}")
    @ResponseBody
    public ResponseEntity<?> CategoriesItemProductsThymeleafController.removeFromProducts(@ModelAttribute Category category, @PathVariable("productsToRemove") Long productsToRemove) {
        getCategoryService().removeFromProducts(category,Collections.singleton(productsToRemove));
        return ResponseEntity.ok().build();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param category
     * @param productsToRemove
     * @return ResponseEntity
     */
    @DeleteMapping(name = "removeFromProductsBatch", value = "/batch/{productsToRemove}")
    @ResponseBody
    public ResponseEntity<?> CategoriesItemProductsThymeleafController.removeFromProductsBatch(@ModelAttribute Category category, @PathVariable("productsToRemove") Collection<Long> productsToRemove) {
        getCategoryService().removeFromProducts(category, productsToRemove);
        return ResponseEntity.ok().build();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param category
     * @param products
     * @param model
     * @return ModelAndView
     */
    @PostMapping(name = "create")
    public ModelAndView CategoriesItemProductsThymeleafController.create(@ModelAttribute Category category, @RequestParam("productsIds") List<Long> products, Model model) {
        // Remove empty values
        for (Iterator<Long> iterator = products.iterator(); iterator.hasNext();) {
            if (iterator.next() == null) {
                iterator.remove();
            }
        }
        getCategoryService().setProducts(category,products);
        return new ModelAndView("redirect:" + getCollectionLink().to(CategoriesCollectionThymeleafLinkFactory.LIST).toUriString());
    }
    
}
